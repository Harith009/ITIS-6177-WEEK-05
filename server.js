const express = require('express');
var bodyParser = require('body-parser');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host : 'localhost',
        user : 'root',
        password: 'root',
        port: 3306,
        connectionLimit:5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition :{
        info:{
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by'
        },
        host: '137.184.140.231:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
}

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

/**
 * @swagger
 * /agents:
 *     get:
 *       description: Return all prices
 *       produces:
 *          - application/json
 *       responses:
 *          200:
 *              description: Object food containing array of food object with prices
*/
app.get('/prices',(req,resp) =>{
    pool.query('SELECT * from sample.agents')
        .then(res => {
                resp.statusCode = 200;
                resp.setHeader('Content-Type','Application/json');
                resp.send(res);
                })
        .catch(err => console.error('Error exccuting query', err.stack));
    // res.json(prices);
});


/**
 * @swagger
 * /agents:
 *  put:
 *    description: Updates agents
 *    consumes: 
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agent"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agent"
 *    responses: 
 *      200:
 *       description: A successfull response
 * definitions:
 *   agent:
 *     type: object
 *     required:
 *     - agentCode
 *     - agentName
 *     - workingArea
 *     - commission
 *     - phoneNo
 *     - country
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A023
 *       agentName:
 *         type: string
 *         example: Wilson
 *       workingArea: 
 *         type: string
 *         example: Banglore
 *       commission:
 *         type: number
 *         example: 0.15
 *       phoneNo:
 *         type: string
 *         example: 1234567890
 *       country:
 *         type: string
 *         example: India
*/
app.put('/agents',(req,resp) =>{
    pool.query(`update sample.agents set agent_name = '${req['body'].agentName}' where working_area = '${req['body'].workingArea}'`).then(res => {
                resp.statusCode = 200;
                resp.setHeader('Content-Type','Application/json');
                resp.send(res);
               })
        .catch(err => console.error('Error exccuting query', err.stack));
});



/**
 * @swagger
 * /agents:
 *  post:
 *    description: Updates agents
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agent"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agent"
 *    responses:
 *      200:
 *       description: A successfull response
 * definitions:
 *   agent:
 *     type: object
 *     required:
 *     - agentCode
 *     - agentName
 *     - workingArea
 *     - commission
 *     - phoneNo
 *     - country
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A023
 *       agentName:
 *         type: string
 *         example: Wilson
 *       workingArea:
 *         type: string
 *         example: Banglore
 *       commission:
 *         type: number
 *         example: 0.15
 *       phoneNo:
 *         type: string
 *         example: 1234567890
 *       country:
 *         type: string
 *         example: India
*/
app.post('/agents',(req,resp) =>{
    console.log(req['body']);
    pool.query(`insert into sample.agents values ('${req['body'].agentCode}', '${req['body'].agentName}', '${req['body'].workingArea}', '${req['body'].commission}', '${req['body'].phone_no}', '${req['body'].country}')`).then(res => {
                resp.statusCode = 200;
                resp.setHeader('Content-Type','Application/json');
                resp.send(res);
               })
        .catch(err => console.error('Error exccuting query', err.stack));
});

/**
 * @swagger
 * /prices:
 *  delete:
 *    description: Removes product
 *    consumes: 
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: name
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/price"
 *    responses: 
 *      200:
 *       description: A successfull response
 * definitions:
 *   price:
 *     type: object
 *     required:
 *     - name
 *     properties:
 *       name:
 *         type: string
 *         example: Mango
*/
app.delete('/prices',(req,res) =>{
    console.log(req['body']);
    res.status(200).send("Succesfully sent");
});

app.listen(port, ()=>{
    console.log(`API server at ${port}`);
})
